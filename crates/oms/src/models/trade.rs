// Copyright 2025 chenjjiaa
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use chrono::{DateTime, Utc};
use rust_decimal::Decimal;
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Trade {
    /// Trade unique identifier
    pub id: String,

    /// User ID
    #[serde(rename = "userId")]
    pub user_id: String,

    /// Associated order ID
    #[serde(rename = "orderId")]
    pub order_id: String,

    /// ClientOrderID is a unique identifier generated by the client to ensure idempotent order submission
    /// and enable end-to-end order tracking. Key purposes:
    /// Idempotency Control:
    ///   - Prevents duplicate submissions: Server rejects requests with duplicate ClientOrderID
    ///   - Client-generated uniqueness: Typically uses UUID or "[userPrefix]-[timestamp]-[random]" format
    ///     (avoids reliance on server-side auto-increment IDs)
    /// Order Tracking:
    ///   - End-to-end visibility: Clients can track order status using this ID without needing server-generated OrderID
    ///     (critical for asynchronous processing)
    ///   - Cross-system correlation: Acts as a universal reference across microservices (orders, trades, settlements)
    #[serde(rename = "clientOrderId")]
    pub client_order_id: String,

    /// MatchID is a unique identifier generated by the matching engine for each order match event,
    /// used to track all trade records associated with the same batch of matches.
    #[serde(rename = "matchId")]
    pub match_id: String,

    /// Trading pair
    pub symbol: String,

    /// Execution price
    pub price: Decimal,

    /// Execution amount
    pub amount: Decimal,

    /// Trading fee
    pub fee: Decimal,

    /// Transaction fee pricing currency (such as "USDT")
    #[serde(rename = "feeCurrency")]
    pub fee_currency: String,

    /// Position side ("buy" or "sell")
    #[serde(rename = "positionSide")]
    pub position_side: String,

    /// Forced liquidation triggered
    #[serde(rename = "isLiquidation")]
    pub is_liquidation: bool,

    /// RealizedPnl: Realized Profit and Loss
    #[serde(rename = "realizedPnl")]
    pub realized_pnl: Decimal,

    /// Trade type ("maker" or "taker")
    #[serde(rename = "tradeType")]
    pub trade_type: String,

    /// Global sequence number for matching engine
    pub sequence: i64,

    /// Creation time
    #[serde(rename = "createdAt")]
    pub created_at: DateTime<Utc>,

    /// Update time
    #[serde(rename = "updatedAt")]
    pub updated_at: DateTime<Utc>,

    /// Microsecond timestamp
    #[serde(rename = "microTimestamp")]
    pub micro_timestamp: i64,
}
